package pl.funnyqrz.services.reports;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import org.springframework.stereotype.Service;
import pl.funnyqrz.entities.ExchangeRateEntity;
import pl.funnyqrz.exceptions.ApplicationException;
import pl.funnyqrz.services.AbstractService;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDate;

@Service
public class PDFReportRendererImpl extends AbstractService implements PDFReportRenderer {

    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);

    @Override
    public File renderReport(ExchangeRateEntity exchangeRateEntity) {

        Document document = new Document();
        File pdfFile = null;
        try {
            pdfFile = File.createTempFile("report" + LocalDate.now().toString(), ".pdf");
        } catch (IOException e) {
            getLogger().error("Error while creating temporary file!", e);
            throw new ApplicationException("Error while creating temporary file!", e);
        }

        createPdfFileInstance(document, pdfFile);

        try {
            renderReport(exchangeRateEntity, document);
        } catch (DocumentException e) {
            getLogger().error("Error while rendering report!", e);
            throw new ApplicationException("Error while rendering report!", e);
        }

        return pdfFile;
    }

    private void createPdfFileInstance(Document document, File pdfFile) {
        try {
            PdfWriter.getInstance(document, new FileOutputStream(pdfFile));
        } catch (DocumentException e) {
            getLogger().error("Error while creating report instance!", e);
            throw new ApplicationException("Error while creating report instance!", e);
        } catch (FileNotFoundException e) {
            getLogger().error("Error while creating report instance!", e);
            throw new ApplicationException("Error while creating report instance!", e);
        }
    }

    private void renderReport(ExchangeRateEntity exchangeRateEntity, Document document) throws DocumentException {
        document.open();
        addMetaData(document);
        addChunk(document);
        addContent(document, exchangeRateEntity);
        addFooter(document);
        document.close();
    }

    private void addFooter(Document document) throws DocumentException {
        Paragraph preface = new Paragraph();
        addEmptyLine(preface, 1);
        preface.add(new Paragraph("This report was generated by Secure Currency Calculator Team!", catFont));
        document.add(preface);
    }

    private void addChunk(Document document) throws DocumentException {
        Font font = FontFactory.getFont(FontFactory.COURIER, 16, BaseColor.BLACK);
        Chunk chunk = new Chunk("Hello, Daily report!", font);
        document.add(chunk);
    }

    private void addContent(Document document, ExchangeRateEntity exchangeRateEntity) throws DocumentException {

        Paragraph preface = new Paragraph();
        addEmptyLine(preface, 1);
        preface.add(new Paragraph("We send new currency raport. Look at this! ", catFont));
        addEmptyLine(preface, 1);
        // TODO data in table
        preface.add(new Paragraph(renderDataString(exchangeRateEntity), catFont));
        addEmptyLine(preface, 2);
        document.add(preface);
    }

    private String renderDataString(ExchangeRateEntity exchangeRateEntity) {

        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("EUR: " + exchangeRateEntity.getEurExchangeRate());
        stringBuilder.append("\n");
        stringBuilder.append("CHF: " + exchangeRateEntity.getChfExchangeRate());
        stringBuilder.append("\n");
        stringBuilder.append("USD: " + exchangeRateEntity.getUsdExchangeRate());
        stringBuilder.append("\n");
        stringBuilder.append("GBF: " + exchangeRateEntity.getGbpExchangeRate());
        return stringBuilder.toString();
    }


    private void addMetaData(Document document) {
        document.addTitle("Exchange rate daily report");
        document.addSubject("Exchange rate daily report " + LocalDate.now());
        document.addKeywords("Java, PDF, iText, NBP API, Email, Exchange rate");
        document.addAuthor("Secure Currency Converter Team");
        document.addCreator("Secure Currency Converter Team");
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

    private static void createTable(Section subCatPart)
            throws BadElementException {
        PdfPTable table = new PdfPTable(3);

        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 2"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 3"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        table.addCell("1.0");
        table.addCell("1.1");
        table.addCell("1.2");
        table.addCell("2.1");
        table.addCell("2.2");
        table.addCell("2.3");

        subCatPart.add(table);

    }

}
//http://www.baeldung.com/java-pdf-creation
//http://www.vogella.com/tutorials/JavaPDF/article.html